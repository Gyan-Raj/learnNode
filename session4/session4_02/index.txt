Till now upto session3, we saw how express framework works and how easy it makes to route different paths including dynamic routing
  -we used const http=require("http"):provided by node, and  used const server=http.createServer((req,res)=>{res.writeHead();res.write();res.end()})
  -we replaced require("http") by const express=require("express"):provided by express and used const app=express(), and then app.get("/urlPaths",(req,res)=>)
  -we used req.params for dynamic routing
  -we used req.query for query parameters
  -we organised our code by writing callback functions of index.js in separate folder called controllers(session2/session2_03)
  -In Express, the routes are served in the first come first server manner(session2/session2_04) and (session2/session2_05)
  -added validation for search query parameters for gender and age to reduce wastage of compotational resources on server (session2/session2_06)
  -used express router module to manage our routes in a separate file which allows us to club our routes together and manages API versioning. (session3/session3_01)
  -used Joi validation library for validating the request before hitting the server(session3/session3_01)
  -protected our routes using password "LetMeIn" (session3/session3_03)
  -protected our routes by writing environment variables, which we write in .env file. We used dotenv library as devDependency to read .env files(session3/session3_04)
  -protected our routes by using middlewares (which takes 3 parameters: req, res, next), SELECTIVELY as well as GLOBALLY


//index.js
const express = require("express");
const app = express();
const PORT = 8082;

const userRouter = require("./routes/users.routes");
const currencyRouter = require("./routes/currencies.routes");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});

app.use("/currencies", currencyRouter);

app.use("/users", userRouter); 

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});





//controllers/currencies.controllers.js

const currenciesJSON = require("../currencies.json");
require("dotenv").config();
const getCurrencies = (req, res) => {
  console.log(process.env.password, "pass");
  console.log(req.headers.authorization, "auth");

  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};
const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = {
  getCurrencies,
  getCurrencyBySymbol,
};







//controllers/users.controllers.js

const usersJSON = require("../users.json");

const getQueryErrors = require("../validations/userSearch.validation");

const getUsers = (req, res) => {
  res.header({ "content-type": "application/json" }).send(usersJSON.data);
};
const getUserById = (req, res) => {
  const { uuid } = req.params;
  console.log(uuid);
  const reqUser = usersJSON.data.find((user) => user.login.uuid === uuid);
  if (reqUser) {
    return res.header({ "content-type": "application/json" }).send(reqUser);
  } else {
    return res
      .status(404)
      .send({ message: `User with uuid: ${uuid} can not be found` });
  }
};

const searchUsers = (req, res) => {
  let { gender, age } = req.query;

  const { error } = getQueryErrors({ gender, age });
  if (error) {
    return res.status(400).json(error);
  }
  if (gender && age) {
    return res
      .header({ "content-type": "application/json" })
      .send(
        usersJSON.data.filter(
          (user) => user.gender === gender && String(user.dob.age) === age
        )
      );
  } else if (gender) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => user.gender === gender));
  } else {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => String(user.dob.age) === age));
  }
};

module.exports = {
  getUsers,
  getUserById,
  searchUsers,
};




//routes/currencies.routes.js

const express = require("express");
const router = express.Router();
const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("../controllers/currencies.controllers");

const verifyAuth=require("../middlewares/verifyAuth")

router.get("/", verifyAuth, getCurrencies);

router.get("/:symbol", getCurrencyBySymbol);

module.exports = router;





//routes/users.routes.js

const express = require("express");
const {
  getUsers,
  getUserById,
  searchUsers,
} = require("../controllers/users.controllers");

const router = express.Router();

const verifyAuth = require("../middlewares/verifyAuth");

router.use(verifyAuth);

router.get("/", getUsers);
router.get("/search", searchUsers);
router.get("/:uuid", getUserById);

module.exports = router;





//validations/userSearch.validation.js

const Joi = require("joi");

const validGenders = ["male", "female"];
const userSearchSchema = Joi.object({
  gender: Joi.string().valid(...validGenders),
  age: Joi.number().min(0).max(100),
}).or("gender", "age");

const getQueryErrors = ({ gender, age }) => {
  const result = userSearchSchema.validate({ gender, age });
  return result;
};

module.exports = getQueryErrors;



//.env
password=LetMeIn


//middlewares/verifyAuth.js

const verifyAuth = (req, res, next) => {
  if (req.headers.authorization !== process.env.password) {
    console.log(req.headers.authorization);
    console.log(process.env.password,"pass");

    return res.sendStatus(403);
  } else {
    next();
  }
};

module.exports = verifyAuth;



//requests.rest

GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies
Authorization: LetMeIn
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###
GET http://localhost:8082/users
###
GET http://localhost:8082/users/6607d086-7159-4c26-beb1-280c9f9cbf35
###
GET http://localhost:8082/users/search?gender=male
###
GET http://localhost:8082/users/search?age=49
###
GET http://localhost:8082/users/search?gender=male&age=49
###
GET http://localhost:8082/users/search?age=49&gender=male
###
GET http://localhost:8082/users/search
###
GET http://localhost:8082/users/search?gender=xyz
###
###
GET http://localhost:8082/users/search?age=-50
###




<<<---------------------------------------------------------------------------->>>

We will now use Validators as middlewares
  -We have already created a getQueryErrors function, we can now move it to a new folder middlewares/validators
  -Convert this getQueryErrors function into a validateSearchQuery middleware.
  -NOTE that: Middleware take in req, res, and next. It can return a response to the client and if everything goes well, they call the next middleware.

For now, we need to only use this middleware for the /users/search route. Letâ€™s see how to selectively apply middleware. Here, we are applying it for users/search




//index.js
const express = require("express");
const app = express();
const PORT = 8082;

const userRouter = require("./routes/users.routes");
const currencyRouter = require("./routes/currencies.routes");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});

app.use("/currencies", currencyRouter);

app.use("/users", userRouter); 

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});






//controllers/currencies.controllers.js

const currenciesJSON = require("../currencies.json");
require("dotenv").config();
const getCurrencies = (req, res) => {
  console.log(process.env.password, "pass");
  console.log(req.headers.authorization, "auth");

  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};
const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = {
  getCurrencies,
  getCurrencyBySymbol,
};





//controllers/users.controllers.js

const usersJSON = require("../users.json");

const getQueryErrors = require("../validations/userSearch.validation");

const getUsers = (req, res) => {
  res.header({ "content-type": "application/json" }).send(usersJSON.data);
};
const getUserById = (req, res) => {
  const { uuid } = req.params;
  const reqUser = usersJSON.data.find((user) => user.login.uuid === uuid);
  if (reqUser) {
    return res.header({ "content-type": "application/json" }).send(reqUser);
  } else {
    return res
      .status(404)
      .send({ message: `User with uuid: ${uuid} can not be found` });
  }
};

const searchUsers = (req, res) => {
  let { gender, age } = req.query;

  if (gender && age) {
    return res
      .header({ "content-type": "application/json" })
      .send(
        usersJSON.data.filter(
          (user) => user.gender === gender && String(user.dob.age) === age
        )
      );
  } else if (gender) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => user.gender === gender));
  } else {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => String(user.dob.age) === age));
  }
};

module.exports = {
  getUsers,
  getUserById,
  searchUsers,
};




//routes/currencies.routes.js

const express = require("express");
const router = express.Router();
const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("../controllers/currencies.controllers");

const verifyAuth=require("../middlewares/verifyAuth")

router.get("/", verifyAuth, getCurrencies);

router.get("/:symbol", getCurrencyBySymbol);

module.exports = router;





//routes/users.routes.js

const express = require("express");
const {
  getUsers,
  getUserById,
  searchUsers,
} = require("../controllers/users.controllers");

const router = express.Router();

const verifyAuth = require("../middlewares/verifyAuth");

router.use(verifyAuth);

const validator = require("../middlewares/validators");
const userSearchSchema = require("../validations/userSearch.validation");

router.get("/", getUsers);
router.get("/search", validator(userSearchSchema), searchUsers);
router.get("/:uuid", getUserById);

module.exports = router;





//validations/userSearch.validation.js

const Joi = require("joi");

const validGenders = ["male", "female"];

const userSearchSchema = Joi.object({
  gender: Joi.string().valid(...validGenders),
  age: Joi.number().min(0).max(100),
}).or("gender", "age");

module.exports = userSearchSchema;




//.env
password=LetMeIn


//middlewares/verifyAuth.js

const verifyAuth = (req, res, next) => {
  if (req.headers.authorization !== process.env.password) {
    return res.sendStatus(403);
  } else {
    next();
  }
};

module.exports = verifyAuth;





//middlewares/validators.js

const validator = (schema) => (req, res, next) => {
  const { gender, age } = req.query;
  const { error } = schema.validate({ gender, age });
  if (error) {
    return res.status(422).send({ message: error.details[0].message });
  } else {
    next();
  }
};

module.exports = validator;








//requests.rest

GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies
Authorization: LetMeIn
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###
GET http://localhost:8082/users
###
GET http://localhost:8082/users/6607d086-7159-4c26-beb1-280c9f9cbf35
###
GET http://localhost:8082/users/search?gender=male
Authorization: LetMeIn
###
GET http://localhost:8082/users/search?age=49
Authorization: LetMeIn
###
GET http://localhost:8082/users/search?gender=male&age=49
Authorization: LetMeIn
###
GET http://localhost:8082/users/search?age=49&gender=male
Authorization: LetMeIn
###
GET http://localhost:8082/users/search
Authorization: LetMeIn
###
GET http://localhost:8082/users/search?gender=xyz
Authorization: LetMeIn
###
GET http://localhost:8082/users/search?age=-50
Authorization: LetMeIn
###







<<<---------------------------------------------------------------------------->>>

# In session4/session_02, we used middleware to validate user search at route "users/search"
# Now, let us use "celebrate" package provided by joi to validate the "search" ("users/search") as well as "uuid" ("users/:uuid") session4/session4_03
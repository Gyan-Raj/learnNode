Till now upto session3/session3_02, we saw how express framework works and how easy it makes to route different paths including dynamic routing
  -we used const http=require("http"):provided by node, and  used const server=http.createServer((req,res)=>{res.writeHead();res.write();res.end()})
  -we replaced require("http") by const express=require("express"):provided by express and used const app=express(), and then app.get("/urlPaths",(req,res)=>)
  -we used req.params for dynamic routing
  -we used req.query for query parameters
  -we organised our code by writing callback functions of index.js in separate folder called controllers(session2/session2_03)
  -In Express, the routes are served in the first come first server manner(session2/session2_04) and (session2/session2_05)
  -added validation for search query parameters for gender and age to reduce wastage of compotational resources on server (session2/session2_06)
  -used express router module to manage our routes in a separate file which allows us to club our routes together and manages API versioning. (session3/session3_01)
  -used Joi validation library for validating the request before hitting the server(session3/session3_01)


//index.js

const express = require("express");
const app = express();
const PORT = 8082;

const userRouter = require("./routes/users.routes");
const currencyRouter = require("./routes/currencies.routes");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});

app.use("/currencies", currencyRouter);

app.use("/users", userRouter); 

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});





//controllers/currencies.controllers.js

const currenciesJSON = require("../currencies.json");
const getCurrencies = (req, res) => {
  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};
const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = {
  getCurrencies,
  getCurrencyBySymbol,
};





//controllers/users.controllers.js

const usersJSON = require("../users.json");

const getQueryErrors = require("../validations/userSearch.validation");

const getUsers = (req, res) => {
  res.header({ "content-type": "application/json" }).send(usersJSON.data);
};
const getUserById = (req, res) => {
  const { uuid } = req.params;
  console.log(uuid);
  const reqUser = usersJSON.data.find((user) => user.login.uuid === uuid);
  if (reqUser) {
    return res.header({ "content-type": "application/json" }).send(reqUser);
  } else {
    return res
      .status(404)
      .send({ message: `User with uuid: ${uuid} can not be found` });
  }
};

const searchUsers = (req, res) => {
  let { gender, age } = req.query;

  const { error } = getQueryErrors({ gender, age });
  if (error) {
    return res.status(400).json(error);
  }
  if (gender && age) {
    return res
      .header({ "content-type": "application/json" })
      .send(
        usersJSON.data.filter(
          (user) => user.gender === gender && String(user.dob.age) === age
        )
      );
  } else if (gender) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => user.gender === gender));
  } else {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => String(user.dob.age) === age));
  }
};

module.exports = {
  getUsers,
  getUserById,
  searchUsers,
};



//routes/currencies.routes.js

const express = require("express");
const router = express.Router();
const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("../controllers/currencies.controllers");

router.get("/", getCurrencies);

router.get("/:symbol", getCurrencyBySymbol);

module.exports = router;



//routes/users.routes.js

const express = require("express");
const {
  getUsers,
  getUserById,
  searchUsers,
} = require("../controllers/users.controllers");

const router = express.Router();

router.get("/", getUsers);
router.get("/search", searchUsers);
router.get("/:uuid", getUserById);

module.exports = router;



//validations/userSearch.validation.js

const Joi = require("joi");

const validGenders = ["male", "female"];
const userSearchSchema = Joi.object({
  gender: Joi.string().valid(...validGenders),
  age: Joi.number().min(0).max(100),
}).or("gender", "age");

const getQueryErrors = ({ gender, age }) => {
  //This function will take in the arguement as an object and then validate it against the schema we just created
  const result = userSearchSchema.validate({ gender, age }); // The validate() function takes in the data and returns an object.
  console.log(result); //we get an object as response as stated at line above.

  /**
   * So, for request like: GET http://localhost:8082/users/search?gender=male we will get:
    { value: { gender: 'male', age: undefined } }

   * for request like: GET http://localhost:8082/users/search?age=49 we will get
    { value: { gender: undefined, age: 49 } }

   * for GET http://localhost:8082/users/search?age=49&gender=male we will get
    { value: { gender: 'male', age: 49 } }
   
   * i.e., if the query params are valid, we will get an object with just one key as "value" which again is an object
   */

  //Now,say we have incorrect query parameters, then we will again get an object but this time with 2 keys: one as "value" and second as "error" which has a lot of useful information about the data and the error it was subjected to.
  /**
   * So, GET http://localhost:8082/users/search?gender=xyz will give us:
    {
    value: { gender: 'xyz', age: undefined },
    error: [Error [ValidationError]: "gender" must be one of [male, female]] {
            _original: { gender: 'xyz', age: undefined },
            details: [ [Object] ]
        }
    }
   * GET http://localhost:8082/users/search?age=-50 will give:
   {
    value: { gender: undefined, age: '-50' },
    error: [Error [ValidationError]: "age" must be greater than or equal to 0] {
            _original: { gender: undefined, age: '-50' },
            details: [ [Object] ]
        }
    }
   * GET http://localhost:8082/users/search will give:
   {
    value: { gender: undefined, age: undefined },
    error: [Error [ValidationError]: "value" must contain at least one of [gender, age]] {
            _original: { gender: undefined, age: undefined },
            details: [ [Object] ]
        }
    }
   */
  return result;
};

// Now we can easily use this function in our searchUsersByQuery() controller

module.exports = getQueryErrors;




//requests.rest

GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###
GET http://localhost:8082/users
###
GET http://localhost:8082/users/6607d086-7159-4c26-beb1-280c9f9cbf35
###
GET http://localhost:8082/users/search?gender=male
###
GET http://localhost:8082/users/search?age=49
###
GET http://localhost:8082/users/search?gender=male&age=49
###
GET http://localhost:8082/users/search?age=49&gender=male
###
GET http://localhost:8082/users/search
###
GET http://localhost:8082/users/search?gender=xyz
###
###
GET http://localhost:8082/users/search?age=-50
###







<<<---------------------------------------------------------------------------->>>

# Now, in this session, we will protect our server by a password ("LetMeIn")
  -Let us define a password for our server: const password = "LetMeIn"
  -Now we can restrict the access for our APIs by doing a check:
    If the headers of the request (req.header) finds the "Authorization" header and it matches our passw"ord then only we process the request(i.e., if (req.headers.authorization===password)), else return a status of 403 and {"message": "Unauthorized Request"}
  -Use this function to protect the "/currencies" route (i.e., for getCurrencies function written in controllers/currencies.controllers.js)
  -See @:line321 to @line:323 in controllers/controllers.currencies.js
  -if we try to hit
  GET http://localhost:8082/currencies
  ### , it will send response as 403 (Forbidden).
  So, now to get the response we have to pass Authorization as :
  GET http://localhost:8082/currencies
  Authorization: LetMeIn
  ###




//index.js

const express = require("express");
const app = express();
const PORT = 8082;

const userRouter = require("./routes/users.routes");
const currencyRouter = require("./routes/currencies.routes");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});

app.use("/currencies", currencyRouter);

app.use("/users", userRouter); 

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});





//controllers/currencies.controllers.js

const currenciesJSON = require("../currencies.json");
const password = "LetMeIn";
const getCurrencies = (req, res) => {
  const { min_value } = req.query;
  if (req.headers.authorization !== password) {
    return res.sendStatus(403); //403 is for "Forbidden"
  }
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};
const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = {
  getCurrencies,
  getCurrencyBySymbol,
};






//controllers/users.controllers.js

const usersJSON = require("../users.json");

const getQueryErrors = require("../validations/userSearch.validation");

const getUsers = (req, res) => {
  res.header({ "content-type": "application/json" }).send(usersJSON.data);
};
const getUserById = (req, res) => {
  const { uuid } = req.params;
  console.log(uuid);
  const reqUser = usersJSON.data.find((user) => user.login.uuid === uuid);
  if (reqUser) {
    return res.header({ "content-type": "application/json" }).send(reqUser);
  } else {
    return res
      .status(404)
      .send({ message: `User with uuid: ${uuid} can not be found` });
  }
};

const searchUsers = (req, res) => {
  let { gender, age } = req.query;

  const { error } = getQueryErrors({ gender, age });
  if (error) {
    return res.status(400).json(error);
  }
  if (gender && age) {
    return res
      .header({ "content-type": "application/json" })
      .send(
        usersJSON.data.filter(
          (user) => user.gender === gender && String(user.dob.age) === age
        )
      );
  } else if (gender) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => user.gender === gender));
  } else {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => String(user.dob.age) === age));
  }
};

module.exports = {
  getUsers,
  getUserById,
  searchUsers,
};



//routes/currencies.routes.js

const express = require("express");
const router = express.Router();
const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("../controllers/currencies.controllers");

router.get("/", getCurrencies);

router.get("/:symbol", getCurrencyBySymbol);

module.exports = router;



//routes/users.routes.js

const express = require("express");
const {
  getUsers,
  getUserById,
  searchUsers,
} = require("../controllers/users.controllers");

const router = express.Router();

router.get("/", getUsers);
router.get("/search", searchUsers);
router.get("/:uuid", getUserById);

module.exports = router;



//validations/userSearch.validation.js

const Joi = require("joi");

const validGenders = ["male", "female"];
const userSearchSchema = Joi.object({
  gender: Joi.string().valid(...validGenders),
  age: Joi.number().min(0).max(100),
}).or("gender", "age");

const getQueryErrors = ({ gender, age }) => {
  //This function will take in the arguement as an object and then validate it against the schema we just created
  const result = userSearchSchema.validate({ gender, age }); // The validate() function takes in the data and returns an object.
  console.log(result); //we get an object as response as stated at line above.

  /**
   * So, for request like: GET http://localhost:8082/users/search?gender=male we will get:
    { value: { gender: 'male', age: undefined } }

   * for request like: GET http://localhost:8082/users/search?age=49 we will get
    { value: { gender: undefined, age: 49 } }

   * for GET http://localhost:8082/users/search?age=49&gender=male we will get
    { value: { gender: 'male', age: 49 } }
   
   * i.e., if the query params are valid, we will get an object with just one key as "value" which again is an object
   */

  //Now,say we have incorrect query parameters, then we will again get an object but this time with 2 keys: one as "value" and second as "error" which has a lot of useful information about the data and the error it was subjected to.
  /**
   * So, GET http://localhost:8082/users/search?gender=xyz will give us:
    {
    value: { gender: 'xyz', age: undefined },
    error: [Error [ValidationError]: "gender" must be one of [male, female]] {
            _original: { gender: 'xyz', age: undefined },
            details: [ [Object] ]
        }
    }
   * GET http://localhost:8082/users/search?age=-50 will give:
   {
    value: { gender: undefined, age: '-50' },
    error: [Error [ValidationError]: "age" must be greater than or equal to 0] {
            _original: { gender: undefined, age: '-50' },
            details: [ [Object] ]
        }
    }
   * GET http://localhost:8082/users/search will give:
   {
    value: { gender: undefined, age: undefined },
    error: [Error [ValidationError]: "value" must contain at least one of [gender, age]] {
            _original: { gender: undefined, age: undefined },
            details: [ [Object] ]
        }
    }
   */
  return result;
};

// Now we can easily use this function in our searchUsersByQuery() controller

module.exports = getQueryErrors;




//requests.rest

GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies
Authorization: LetMeIn
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###
GET http://localhost:8082/users
###
GET http://localhost:8082/users/6607d086-7159-4c26-beb1-280c9f9cbf35
###
GET http://localhost:8082/users/search?gender=male
###
GET http://localhost:8082/users/search?age=49
###
GET http://localhost:8082/users/search?gender=male&age=49
###
GET http://localhost:8082/users/search?age=49&gender=male
###
GET http://localhost:8082/users/search
###
GET http://localhost:8082/users/search?gender=xyz
###
###
GET http://localhost:8082/users/search?age=-50
###


<<<---------------------------------------------------------------------------->>>





# BUT BUT BUT Should we deploy a code alongwith the password written? i.e., We protected our routes, but who will protect our password?
Ans: 
  -We can use the system’s environment variables to mask and hide sensitive information like API keys or Server Endpoints. Because when we deploy our project we specify them separately in the hosting service.

we will do it in session3/session3_04

Till now upto session3/session3_01, we saw how express framework works and how easy it makes to route different paths including dynamic routing
  -we used const http=require("http"):provided by node, and  used const server=http.createServer((req,res)=>{res.writeHead();res.write();res.end()})
  -we replaced require("http") by const express=require("express"):provided by express and used const app=express(), and then app.get("/urlPaths",(req,res)=>)
  -we used req.params for dynamic routing
  -we used req.query for query parameters
  -we organised our code by writing callback functions of index.js in separate folder called controllers(session2/session2_03)
  -In Express, the routes are served in the first come first server manner(session2/session2_04) and (session2/session2_05)
  -added validation for search query parameters for gender and age to reduce wastage of compotational resources on server (session2/session2_06)
  -used express router module to manage our routes in a separate file which allows us to club our routes together and manages API versioning. (session3/session3_01)




//index.js

const express = require("express");
const app = express();
const PORT = 8082;

const userRouter = require("./routes/users.routes");
const currencyRouter = require("./routes/currencies.routes");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});

app.use("/currencies", currencyRouter); //to use the routes, we have a function in the express app object called use() that takes in two parameters:- route (string), i.e., "/currencies", and middleware for the route → Here it will be the object we imported,i.e., currencyRouter.

app.use("/users", userRouter); //to use the routes, we have a function in the express app object called use() that takes in two parameters:- route (string),  i.e., "/users" and middleware for the route → Here it will be the object we imported, i.e., userRouter.

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});




//controllers/currencies.controllers.js

const currenciesJSON = require("../currencies.json");
const getCurrencies = (req, res) => {
  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};
const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = {
  getCurrencies,
  getCurrencyBySymbol,
};




//controllers/users.controllers.js

const usersJSON = require("../users.json");

const getUsers = (req, res) => {
  res.header({ "content-type": "application/json" }).send(usersJSON.data);
};
const getUserById = (req, res) => {
  const { uuid } = req.params;
  console.log(uuid);
  const reqUser = usersJSON.data.find((user) => user.login.uuid === uuid);
  if (reqUser) {
    return res.header({ "content-type": "application/json" }).send(reqUser);
  } else {
    return res
      .status(404)
      .send({ message: `User with uuid: ${uuid} can not be found` });
  }
};

const searchUsers = (req, res) => {
  let { gender, age } = req.query;
  let validGenders = ["male", "female"];
  if (gender && !validGenders.includes(gender)) {
    return res
      .header({ "content-type": "application/json" })
      .status(400)
      .send({ message: `Gender must be one of: ${validGenders.join(", ")}` });
  }
  if (age && isNaN(age)) {
    return res
      .header({ "content-type": "application/json" })
      .status(400)
      .send({ message: `Age must be a valid number` });
  }
  if (age && age < 0) {
    return res
      .header({ "content-type": "application/json" })
      .status(400)
      .send({ message: `Age cannot be negative` });
  }
  if (gender && age) {
    return res
      .header({ "content-type": "application/json" })
      .send(
        usersJSON.data.filter(
          (user) => user.gender === gender && String(user.dob.age) === age
        )
      );
  } else if (gender) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => user.gender === gender));
  } else if (age) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => String(user.dob.age) === age));
  } else {
    return res
      .header({ "content-type": "application/json" })
      .status(400)
      .send({ message: "Atleast one of 'gender' or 'age' must be present" });
  }
};

module.exports = {
  getUsers,
  getUserById,
  searchUsers,
};


//routes/currencies.routes.js

const express = require("express");
const router = express.Router();
const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("../controllers/currencies.controllers");

router.get("/", getCurrencies);

router.get("/:symbol", getCurrencyBySymbol);

module.exports = router;


//routes/users.routes.js

const express = require("express");
const {
  getUsers,
  getUserById,
  searchUsers,
} = require("../controllers/users.controllers");

const router = express.Router();

router.get("/", getUsers);
router.get("/search", searchUsers);
router.get("/:uuid", getUserById);

module.exports = router;




//requests.rest

GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###
GET http://localhost:8082/users
###
GET http://localhost:8082/users/6607d086-7159-4c26-beb1-280c9f9cbf35
###
GET http://localhost:8082/users/search?gender=male
###
GET http://localhost:8082/users/search?age=49
###
GET http://localhost:8082/users/search?gender=male&age=49
###
GET http://localhost:8082/users/search?age=49&gender=male
###
GET http://localhost:8082/users/search
###
GET http://localhost:8082/users/search?gender=xyz
###
###
GET http://localhost:8082/users/search?age=50a
###
GET http://localhost:8082/users/search?age=-50
###




<<<---------------------------------------------------------------------------->>>

# Now, in this session, we will be focusing on solving second issue discussed in session2/session2_06, which is too much lines of code just for validation of two values (age and gender) of request object. This can be solved by using a validation library JOI.

  -to use JOI, we need to install the package: npm i joi
  -now, we need to import joi and then set a schema for the data object (const Joi=require("joi); const userSearchSchema=Joi.object({}))
    -NOTE:  As it should be an object, so it can be done by either: const userSearchSchema=Joi.object({}), or Joi has a function called keys() that takes in an object schema where we can specify what keys need to be passed through what all checks, so we can also have const userSearchSchema=Joi.object().keys({})
  -Also, Joi object supports method chaining, where you can call one method on the result of the previous one. So, we can have something like: 
    const userSearchSchema = Joi.object({
                              gender: Joi.string().valid(validGenders),
                              age: Joi.number().min(0).max(100),
                            }).or("gender", "age"); //At least one of gender or age should be present

                    OR

    const userSearchSchema = Joi.object().keys({
                              gender: Joi.string().valid(validGenders),
                              age: Joi.number().min(0).max(100),
                            }).or("gender", "age"); //At least one of gender or age should be present

  -earlier, as we have separated controlllers(callback functions) to a different folder, routes to some other folders, we should similarly also have these validators or validator functions in a separate file
  -So, let's create a folder called validations inside which we have a file named userSearch.validation.js=>import joi=>create schema




//index.js

const express = require("express");
const app = express();
const PORT = 8082;

const userRouter = require("./routes/users.routes");
const currencyRouter = require("./routes/currencies.routes");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});

app.use("/currencies", currencyRouter);

app.use("/users", userRouter); 

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});





//controllers/currencies.controllers.js

const currenciesJSON = require("../currencies.json");
const getCurrencies = (req, res) => {
  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};
const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = {
  getCurrencies,
  getCurrencyBySymbol,
};





//controllers/users.controllers.js

const usersJSON = require("../users.json");

const getQueryErrors = require("../validations/userSearch.validation");

const getUsers = (req, res) => {
  res.header({ "content-type": "application/json" }).send(usersJSON.data);
};
const getUserById = (req, res) => {
  const { uuid } = req.params;
  console.log(uuid);
  const reqUser = usersJSON.data.find((user) => user.login.uuid === uuid);
  if (reqUser) {
    return res.header({ "content-type": "application/json" }).send(reqUser);
  } else {
    return res
      .status(404)
      .send({ message: `User with uuid: ${uuid} can not be found` });
  }
};

const searchUsers = (req, res) => {
  let { gender, age } = req.query;

  const { error } = getQueryErrors({ gender, age });
  if (error) {
    return res.status(400).json(error);
  }
  if (gender && age) {
    return res
      .header({ "content-type": "application/json" })
      .send(
        usersJSON.data.filter(
          (user) => user.gender === gender && String(user.dob.age) === age
        )
      );
  } else if (gender) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => user.gender === gender));
  } else {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => String(user.dob.age) === age));
  }
};

module.exports = {
  getUsers,
  getUserById,
  searchUsers,
};



//routes/currencies.routes.js

const express = require("express");
const router = express.Router();
const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("../controllers/currencies.controllers");

router.get("/", getCurrencies);

router.get("/:symbol", getCurrencyBySymbol);

module.exports = router;



//routes/users.routes.js

const express = require("express");
const {
  getUsers,
  getUserById,
  searchUsers,
} = require("../controllers/users.controllers");

const router = express.Router();

router.get("/", getUsers);
router.get("/search", searchUsers);
router.get("/:uuid", getUserById);

module.exports = router;



//validations/userSearch.validation.js

const Joi = require("joi");

const validGenders = ["male", "female"];
const userSearchSchema = Joi.object({
  gender: Joi.string().valid(...validGenders),
  age: Joi.number().min(0).max(100),
}).or("gender", "age");

const getQueryErrors = ({ gender, age }) => {
  //This function will take in the arguement as an object and then validate it against the schema we just created
  const result = userSearchSchema.validate({ gender, age }); // The validate() function takes in the data and returns an object.
  console.log(result); //we get an object as response as stated at line above.

  /**
   * So, for request like: GET http://localhost:8082/users/search?gender=male we will get:
    { value: { gender: 'male', age: undefined } }

   * for request like: GET http://localhost:8082/users/search?age=49 we will get
    { value: { gender: undefined, age: 49 } }

   * for GET http://localhost:8082/users/search?age=49&gender=male we will get
    { value: { gender: 'male', age: 49 } }
   
   * i.e., if the query params are valid, we will get an object with just one key as "value" which again is an object
   */

  //Now,say we have incorrect query parameters, then we will again get an object but this time with 2 keys: one as "value" and second as "error" which has a lot of useful information about the data and the error it was subjected to.
  /**
   * So, GET http://localhost:8082/users/search?gender=xyz will give us:
    {
    value: { gender: 'xyz', age: undefined },
    error: [Error [ValidationError]: "gender" must be one of [male, female]] {
            _original: { gender: 'xyz', age: undefined },
            details: [ [Object] ]
        }
    }
   * GET http://localhost:8082/users/search?age=-50 will give:
   {
    value: { gender: undefined, age: '-50' },
    error: [Error [ValidationError]: "age" must be greater than or equal to 0] {
            _original: { gender: undefined, age: '-50' },
            details: [ [Object] ]
        }
    }
   * GET http://localhost:8082/users/search will give:
   {
    value: { gender: undefined, age: undefined },
    error: [Error [ValidationError]: "value" must contain at least one of [gender, age]] {
            _original: { gender: undefined, age: undefined },
            details: [ [Object] ]
        }
    }
   */
  return result;
};

// Now we can easily use this function in our searchUsersByQuery() controller

module.exports = getQueryErrors;




//requests.rest

GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###
GET http://localhost:8082/users
###
GET http://localhost:8082/users/6607d086-7159-4c26-beb1-280c9f9cbf35
###
GET http://localhost:8082/users/search?gender=male
###
GET http://localhost:8082/users/search?age=49
###
GET http://localhost:8082/users/search?gender=male&age=49
###
GET http://localhost:8082/users/search?age=49&gender=male
###
GET http://localhost:8082/users/search
###
GET http://localhost:8082/users/search?gender=xyz
###
###
GET http://localhost:8082/users/search?age=-50
###











<<<---------------------------------------------------------------------------->>>


We have come a long way, but there is an issue. Now, any person from any place can send us requests at our server and gain access to the APIs. But that can spam our server with requests. 
  -What if we want to password protect our APIs? We will see in session3/session3_03

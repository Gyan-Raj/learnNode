Till now, we saw how express framework works and how easy it makes to route different paths including dynamic routing
  -we used const http=require("http"):provided by node, and  used const server=http.createServer((req,res)=>{res.writeHead();res.write();res.end()})
  -we replaced require("http") by const express=require("express"):provided by express and used const app=express(), and then app.get("/urlPaths",(req,res)=>)
  -we used req.params for dynamic routing
  -we used req.query for query parameters
  -we wrote controller(callback) functions in separate folder and saw how to export and import in common js module (i.e., using module.exports={func1,func2} and const {func1,func2}=require("filePath"))

//index.js
const express = require("express");
const app = express(); //will create an application with express
const PORT = 8082;

const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("./controllers/currencies.controllers");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});
app.get("/currencies", getCurrencies);

app.get("/currencies/:symbol", getCurrencyBySymbol);

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});


//controllers/currencies.controllers.js
const currenciesJSON = require("../currencies.json");
const getCurrencies = (req, res) => {
  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};
const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = { getCurrencies, getCurrencyBySymbol };



//requests.rest
GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###


<<<---------------------------------------------------------------------------->>>

# Now, we will see how export-import can be done in ES modules(esm), and what we saw was Common js (cjs) module.
# for this, we just need to add "type": "module" in our package.json file.
# if not mentioned, it is by default "type":"commonjs"

//package.json
{
  "name": "session2_01",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",       =>  we added this line
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "index.js",
    "dev": "nodemon index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.19.2"
  },
  "devDependencies": {
    "nodemon": "^3.1.4"
  }
}

//index.js
import express from "express";     =>  we can now use import statements
const app = express();
const PORT = 8082;

import {
  getCurrencies,
  getCurrencyBySymbol,
} from "./controllers/currencies.controllers.js";    =>  we can now use import statements; also, we have to write extension for that file

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});
app.get("/currencies", getCurrencies);

app.get("/currencies/:symbol", getCurrencyBySymbol);

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});



//controllers/currencies.controllers.js
import currenciesJSON from "../currencies.json" assert { type: "json" };    =>  we can now use import statements
export const getCurrencies = (req, res) => {    =>  we can now also use named export
  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};
export const getCurrencyBySymbol = (req, res) => { =>  we can now also use named export
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

#NOTE: @line:128, when we imported json file we have to explicitly write the type of file when we import json file, this is done by writing  assert { type: "json" };, also @line:110 we have to write extension for js file

//requests.rest
GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###

# NOTE: @line:128, when we imported json file we have to explicitly write the type of file when we import json file, this is done by writing  assert { type: "json" }; i.e., we have to do similar thing when we import any non-standard file (or a non-javascipt file)
Also, @line:110 we have to write extension for js file, i.e., we have to tell javascript that this file is a javascript file. 


NOTE: ES module is modern way of writing code, and common js is older way. However, for this sprint we will be using common js as most of the code is written as common js only.
<<<---------------------------------------------------------------------------->>>


Till now upto session2/session2_04, we saw how express framework works and how easy it makes to route different paths including dynamic routing
  -we used const http=require("http"):provided by node, and  used const server=http.createServer((req,res)=>{res.writeHead();res.write();res.end()})
  -we replaced require("http") by const express=require("express"):provided by express and used const app=express(), and then app.get("/urlPaths",(req,res)=>)
  -we used req.params for dynamic routing
  -we used req.query for query parameters
  -we organised our code by writing callback functions of index.js in separate folder called controllers(session2/session2_03)
  -In Express, the routes are served in the first come first server manner(session2/session2_04)

//index.js

const express = require("express");
const app = express();
const PORT = 8082;

const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("./controllers/currencies.controllers");
const {
  getUsers,
  getUserById,
  searchUsers,
} = require("./controllers/users.controllers");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});
app.get("/currencies", getCurrencies);

app.get("/currencies/:symbol", getCurrencyBySymbol);

app.get("/users", getUsers);

app.get("/users/:uuid", getUserById);

app.get("/users/search", searchUsers); //?gender=<string>&age=<number>

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});



//controllers/currencies.controllers.js

const currenciesJSON = require("../currencies.json");
const getCurrencies = (req, res) => {
  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};

const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = { getCurrencies, getCurrencyBySymbol };


//controllers/users.controllers.js

const usersJSON = require("../users.json");

const getUsers = (req, res) => {
  res.header({ "content-type": "application/json" }).send(usersJSON.data);
};
const getUserById = (req, res) => {
  const { uuid } = req.params;
  console.log(uuid);
  const reqUser = usersJSON.data.find((user) => user.login.uuid === uuid);
  if (reqUser) {
    return res.header({ "content-type": "application/json" }).send(reqUser);
  } else {
    return res
      .status(404)
      .send({ message: `User with uuid: ${uuid} can not be found` });
  }
};

const searchUsers = (req, res) => {
  let { gender, age } = req.query;
  if (gender && age) {
    return res.header({ "content-type": "application/json" }).send(
      usersJSON.data.filter(
        (user) => user.gender === gender && String(user.dob.age) === age
      )
      //toString() Method:(Syntax: value.toString())This method is called on an object or value and converts it to a string. It works on most objects, including numbers, booleans, arrays, and objects. If the value is null or undefined, calling toString() on it will throw an error because null and undefined don't have a toString() method.
      //String() Function: (Syntax: String(value)) This is a global function that converts any value to a string. It can be used on any value, including null and undefined, without throwing an error. When used on null or undefined, it returns the strings "null" and "undefined", respectively.
    );
  } else if (gender) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => user.gender === gender));
  } else if (age) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => String(user.dob.age) === age));
  } else {
    return res
      .header({ "content-type": "application/json" })
      .status(400)
      .send({ message: "Atleast one of 'gender' or 'age' must be present" });
  }
};

module.exports = {
  getUsers,
  getUserById,
  searchUsers,
};



//requests.rest
GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###
GET http://localhost:8082/users
###
GET http://localhost:8082/users/6607d086-7159-4c26-beb1-280c9f9cbf35
###
GET http://localhost:8082/users/search?gender=male
###
GET http://localhost:8082/users/search?age=49
###
GET http://localhost:8082/users/search?gender=male&age=49
###
GET http://localhost:8082/users/search?age=49&gender=male
###
GET http://localhost:8082/users/search
###


<<<---------------------------------------------------------------------------->>>

# Now, let us correct the order of writing the routes in index.js file


//index.js

const express = require("express");
const app = express();
const PORT = 8082;

const {
  getCurrencies,
  getCurrencyBySymbol,
} = require("./controllers/currencies.controllers");
const {
  getUsers,
  getUserById,
  searchUsers,
} = require("./controllers/users.controllers");

app.get("/", (req, res) => {
  res
    .header({ "content-type": "text/html" })
    .send(`<h1>Currency Database</h1>`);
});
app.get("/currencies", getCurrencies);

app.get("/currencies/:symbol", getCurrencyBySymbol);

app.get("/users", getUsers);

app.get("/users/:uuid", getUserById);

app.get("/users/search", searchUsers); //?gender=<string>&age=<number>

app.listen(PORT, () => {
  console.log(`Server listening at port: ${PORT}`);
});



//controllers/currencies.controllers.js

const currenciesJSON = require("../currencies.json");
const getCurrencies = (req, res) => {
  const { min_value } = req.query;
  if (min_value) {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data.filter((curr) => curr.min_size === min_value));
  } else {
    res
      .header({ "content-type": "application/json" })
      .send(currenciesJSON.data);
  }
};

const getCurrencyBySymbol = (req, res) => {
  const { symbol } = req.params;
  const reqCurr = currenciesJSON.data.find(
    (curr) => curr.id.toLowerCase() === symbol.toLowerCase()
  );
  if (reqCurr) {
    return res.header({ "content-type": "application/json" }).send(reqCurr);
  } else {
    return res.status(404).send({ message: "invalid symbol" });
  }
};

module.exports = { getCurrencies, getCurrencyBySymbol };


//controllers/users.controllers.js

const usersJSON = require("../users.json");

const getUsers = (req, res) => {
  res.header({ "content-type": "application/json" }).send(usersJSON.data);
};
const getUserById = (req, res) => {
  const { uuid } = req.params;
  console.log(uuid);
  const reqUser = usersJSON.data.find((user) => user.login.uuid === uuid);
  if (reqUser) {
    return res.header({ "content-type": "application/json" }).send(reqUser);
  } else {
    return res
      .status(404)
      .send({ message: `User with uuid: ${uuid} can not be found` });
  }
};

const searchUsers = (req, res) => {
  let { gender, age } = req.query;
  if (gender && age) {
    return res.header({ "content-type": "application/json" }).send(
      usersJSON.data.filter(
        (user) => user.gender === gender && String(user.dob.age) === age
      )
      //toString() Method:(Syntax: value.toString())This method is called on an object or value and converts it to a string. It works on most objects, including numbers, booleans, arrays, and objects. If the value is null or undefined, calling toString() on it will throw an error because null and undefined don't have a toString() method.
      //String() Function: (Syntax: String(value)) This is a global function that converts any value to a string. It can be used on any value, including null and undefined, without throwing an error. When used on null or undefined, it returns the strings "null" and "undefined", respectively.
    );
  } else if (gender) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => user.gender === gender));
  } else if (age) {
    return res
      .header({ "content-type": "application/json" })
      .send(usersJSON.data.filter((user) => String(user.dob.age) === age));
  } else {
    return res
      .header({ "content-type": "application/json" })
      .status(400)
      .send({ message: "Atleast one of 'gender' or 'age' must be present" });
  }
};

module.exports = {
  getUsers,
  getUserById,
  searchUsers,
};




//requests.rest
GET http://localhost:8082
###
GET http://localhost:8082/currencies
###
GET http://localhost:8082/currencies?min_value=0.001
###
GET http://localhost:8082/currencies/inr
###
GET http://localhost:8082/users
###
GET http://localhost:8082/users/6607d086-7159-4c26-beb1-280c9f9cbf35
###
GET http://localhost:8082/users/search?gender=male
###
GET http://localhost:8082/users/search?age=49
###
GET http://localhost:8082/users/search?gender=male&age=49
###
GET http://localhost:8082/users/search?age=49&gender=male
###
GET http://localhost:8082/users/search
###

<<<---------------------------------------------------------------------------->>>

Now, that we have fixed it, we should also validate query parameters
  -suppose, we get gender="50" or gender="xyz" or age="male" or age="-50" in query parameters, although we will get an empty array [] as a response from our current code, but we are actually querying out database to give this output. As these are not valid parameters, so these are wasting the COMPUTATIONAL RESOURCE of the server
  -So, we must validate the query parameters before sending the request to the server

We will be doing the validation part in session2_06